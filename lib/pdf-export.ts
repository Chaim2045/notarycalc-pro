/**
 * PDF Export Utility
 *
 * Generate professional PDF invoices/receipts for calculations
 */

import jsPDF from 'jspdf'
import type { Calculation, Profile } from '@/lib/supabase'

interface PDFExportOptions {
  calculation: Calculation
  profile: Profile
  language?: 'he' | 'en'
}

export async function generateCalculationPDF(options: PDFExportOptions): Promise<Blob> {
  const { calculation, profile, language = 'he' } = options
  const doc = new jsPDF()

  // Set RTL for Hebrew
  if (language === 'he') {
    doc.setR2L(true)
  }

  // Colors
  const primaryColor: [number, number, number] = [59, 130, 246] // brand-600
  const textColor: [number, number, number] = [14, 14, 14]
  const secondaryColor: [number, number, number] = [107, 114, 128]

  // Header - Company Info
  doc.setFontSize(20)
  doc.setTextColor(...textColor)
  doc.text(profile.office_name || 'NotaryCalc Pro', 105, 20, { align: 'center' })

  doc.setFontSize(10)
  doc.setTextColor(...secondaryColor)
  if (profile.office_address) {
    doc.text(profile.office_address, 105, 28, { align: 'center' })
  }
  if (profile.office_phone) {
    doc.text(profile.office_phone, 105, 34, { align: 'center' })
  }

  // Line separator
  doc.setDrawColor(...primaryColor)
  doc.setLineWidth(0.5)
  doc.line(20, 40, 190, 40)

  // Invoice Title
  doc.setFontSize(16)
  doc.setTextColor(...primaryColor)
  doc.text(language === 'he' ? 'חישוב תעריפים' : 'Fee Calculation', 20, 50)

  // Date and Client Info
  doc.setFontSize(10)
  doc.setTextColor(...textColor)
  const date = new Date(calculation.created_at).toLocaleDateString(
    language === 'he' ? 'he-IL' : 'en-US'
  )
  doc.text(`${language === 'he' ? 'תאריך' : 'Date'}: ${date}`, 20, 60)

  if (calculation.client_name) {
    doc.text(
      `${language === 'he' ? 'לקוח' : 'Client'}: ${calculation.client_name}`,
      20,
      68
    )
  }

  // Table Header
  const startY = 80
  doc.setFillColor(...primaryColor)
  doc.rect(20, startY, 170, 10, 'F')

  doc.setTextColor(255, 255, 255)
  doc.setFontSize(10)
  doc.text(language === 'he' ? 'תיאור' : 'Description', 25, startY + 7)
  doc.text(language === 'he' ? 'כמות' : 'Qty', 120, startY + 7, { align: 'center' })
  doc.text(language === 'he' ? 'מחיר' : 'Price', 150, startY + 7, { align: 'right' })
  doc.text(language === 'he' ? 'סה"כ' : 'Total', 185, startY + 7, { align: 'right' })

  // Services
  let currentY = startY + 15
  doc.setTextColor(...textColor)

  try {
    const services = typeof calculation.services === 'string'
      ? JSON.parse(calculation.services)
      : calculation.services

    if (Array.isArray(services)) {
      services.forEach((service: any, index: number) => {
        // Alternate row background
        if (index % 2 === 1) {
          doc.setFillColor(245, 246, 248)
          doc.rect(20, currentY - 5, 170, 8, 'F')
        }

        doc.setFontSize(9)
        doc.text(service.name || service.description || '', 25, currentY)
        doc.text(
          String(service.quantity || 1),
          120,
          currentY,
          { align: 'center' }
        )
        doc.text(
          `₪${(service.price || 0).toLocaleString()}`,
          150,
          currentY,
          { align: 'right' }
        )
        doc.text(
          `₪${((service.price || 0) * (service.quantity || 1)).toLocaleString()}`,
          185,
          currentY,
          { align: 'right' }
        )

        currentY += 8
      })
    }
  } catch (error) {
    console.error('Error parsing services:', error)
  }

  // Totals
  currentY += 10
  doc.setDrawColor(...secondaryColor)
  doc.setLineWidth(0.3)
  doc.line(120, currentY, 190, currentY)

  currentY += 8
  doc.setFontSize(10)
  doc.setTextColor(...textColor)

  // Subtotal
  doc.text(language === 'he' ? 'סכום ביניים:' : 'Subtotal:', 150, currentY, {
    align: 'right',
  })
  doc.text(`₪${calculation.subtotal.toLocaleString()}`, 185, currentY, {
    align: 'right',
  })

  currentY += 8
  // VAT
  doc.text(language === 'he' ? 'מע"מ:' : 'VAT:', 150, currentY, { align: 'right' })
  doc.text(`₪${calculation.vat.toLocaleString()}`, 185, currentY, { align: 'right' })

  currentY += 8
  // Total
  doc.setFontSize(12)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryColor)
  doc.text(language === 'he' ? 'סה"כ לתשלום:' : 'Total:', 150, currentY, {
    align: 'right',
  })
  doc.text(`₪${calculation.total.toLocaleString()}`, 185, currentY, { align: 'right' })

  // Footer
  if (calculation.notes) {
    currentY += 15
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(...secondaryColor)
    doc.text(language === 'he' ? 'הערות:' : 'Notes:', 20, currentY)
    doc.text(calculation.notes, 20, currentY + 6, { maxWidth: 170 })
  }

  // Watermark
  doc.setFontSize(8)
  doc.setTextColor(200, 200, 200)
  doc.text(
    `Generated by NotaryCalc Pro - ${new Date().toLocaleString(language === 'he' ? 'he-IL' : 'en-US')}`,
    105,
    285,
    { align: 'center' }
  )

  return doc.output('blob')
}

export function downloadPDF(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  link.click()
  URL.revokeObjectURL(url)
}
